{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Samuel/ProyectoWeb/React/Hackthon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport ascending from \"./ascending.js\";\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n\n  if (compare.length === 1) {\n    let maxValue;\n\n    var _iterator = _createForOfIteratorHelper(values),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        const element = _step.value;\n        const value = compare(element);\n\n        if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {\n          max = element;\n          maxValue = value;\n          defined = true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    var _iterator2 = _createForOfIteratorHelper(values),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        const value = _step2.value;\n\n        if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {\n          max = value;\n          defined = true;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return max;\n}","map":{"version":3,"sources":["C:/Users/Samuel/ProyectoWeb/React/Hackthon/node_modules/d3-array/src/greatest.js"],"names":["ascending","greatest","values","compare","max","defined","length","maxValue","element","value"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,OAAO,GAAGH,SAApC,EAA+C;AAC5D,MAAII,GAAJ;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB,QAAIC,QAAJ;;AADwB,+CAEFL,MAFE;AAAA;;AAAA;AAExB,0DAA8B;AAAA,cAAnBM,OAAmB;AAC5B,cAAMC,KAAK,GAAGN,OAAO,CAACK,OAAD,CAArB;;AACA,YAAIH,OAAO,GACLL,SAAS,CAACS,KAAD,EAAQF,QAAR,CAAT,GAA6B,CADxB,GAELP,SAAS,CAACS,KAAD,EAAQA,KAAR,CAAT,KAA4B,CAFlC,EAEqC;AACnCL,UAAAA,GAAG,GAAGI,OAAN;AACAD,UAAAA,QAAQ,GAAGE,KAAX;AACAJ,UAAAA,OAAO,GAAG,IAAV;AACD;AACF;AAXuB;AAAA;AAAA;AAAA;AAAA;AAYzB,GAZD,MAYO;AAAA,gDACeH,MADf;AAAA;;AAAA;AACL,6DAA4B;AAAA,cAAjBO,KAAiB;;AAC1B,YAAIJ,OAAO,GACLF,OAAO,CAACM,KAAD,EAAQL,GAAR,CAAP,GAAsB,CADjB,GAELD,OAAO,CAACM,KAAD,EAAQA,KAAR,CAAP,KAA0B,CAFhC,EAEmC;AACjCL,UAAAA,GAAG,GAAGK,KAAN;AACAJ,UAAAA,OAAO,GAAG,IAAV;AACD;AACF;AARI;AAAA;AAAA;AAAA;AAAA;AASN;;AACD,SAAOD,GAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n"]},"metadata":{},"sourceType":"module"}